name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        default: "patch"
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"
      pre_release:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean
      skip_merge:
        description: "Skip branch merging (use current main)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

env:
  GO_VERSION: "1.24"

jobs:
  merge-branches:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_merge }}
    outputs:
      merge_completed: ${{ steps.merge-check.outputs.completed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge dev to main for release
        id: merge-check
        run: |
          # First ensure main is up to date with dev
          BRANCH_NAME="dev-to-main-release-$(date +%Y-%m-%d-%H%M%S)"

          # Create branch from main and pull from dev
          git checkout main
          git pull origin main
          git checkout dev
          git pull origin dev
          git checkout main
          git checkout -b $BRANCH_NAME

          # Try to merge dev into the branch
          if git merge dev --no-edit; then
            echo "Merge successful"
            git push origin $BRANCH_NAME
            
            # Create and auto-merge PR
            gh pr create \
              --title "Release preparation: dev → main" \
              --body "Automated merge of dev into main for release preparation." \
              --head $BRANCH_NAME \
              --base main
            
            # Enable auto-merge and wait for it
            gh pr merge $BRANCH_NAME --auto --squash
            
            # Wait a bit for the merge to complete
            sleep 30
            
            echo "completed=true" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected. Please resolve manually."
            echo "completed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: [merge-branches]
    if: ${{ always() && (inputs.skip_merge || needs.merge-branches.outputs.merge_completed == 'true') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      - name: Determine next version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Remove 'v' prefix and split into parts
          VERSION=${LATEST_TAG#v}
          IFS='.' read -ra PARTS <<< "$VERSION"
          MAJOR=${PARTS[0]:-0}
          MINOR=${PARTS[1]:-0}
          PATCH=${PARTS[2]:-0}

          # Increment based on release type
          case "${{ inputs.release_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.version }}

      - name: Update GoReleaser config for multi-app build
        run: |
          # For now, we only have go-jo app, but this will be updated in future steps
          echo "Using current .goreleaser.yml configuration"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release:** ${{ inputs.pre_release }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch merging:** ${{ inputs.skip_merge && 'Skipped' || 'Completed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Released Applications" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ go-jo (binary + .deb package)" >> $GITHUB_STEP_SUMMARY
          echo "- ⏳ go-jo-api (coming soon)" >> $GITHUB_STEP_SUMMARY
          echo "- ⏳ go-jo-integration-installer (coming soon)" >> $GITHUB_STEP_SUMMARY

      - name: Update main branch protection
        if: ${{ !inputs.skip_merge }}
        run: |
          # Wait a bit more to ensure everything is synced
          sleep 10

          # Pull the latest changes to main
          git checkout main
          git pull origin main
