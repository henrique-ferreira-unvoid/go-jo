name: Generate Release

on:
  workflow_dispatch:
    inputs:
      version_source:
        description: "How to determine the version"
        required: true
        default: "auto-increment"
        type: choice
        options:
          - "auto-increment"
          - "manual"
      release_type:
        description: "Type of auto-increment (only for auto-increment source)"
        required: false
        default: "patch"
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"
      manual_version:
        description: "Manual version (e.g., v1.2.3 or 1.2.3) - only for manual source"
        required: false
        default: ""
      pre_release:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean
      skip_merge:
        description: "Skip branch merging (use current main)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

env:
  GO_VERSION: "1.24"

jobs:
  merge-branches:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_merge }}
    outputs:
      merge_completed: ${{ steps.merge-check.outputs.completed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge dev to main for release
        id: merge-check
        run: |
          # First ensure main is up to date with dev
          BRANCH_NAME="dev-to-main-release-$(date +%Y-%m-%d-%H%M%S)"

          # Create branch from main and pull from dev
          git checkout main
          git pull origin main
          git checkout dev
          git pull origin dev
          git checkout main
          git checkout -b $BRANCH_NAME

          # Try to merge dev into the branch
          if git merge dev --no-edit; then
            echo "Merge successful"
            git push origin $BRANCH_NAME
            
            # Create and auto-merge PR
            gh pr create \
              --title "Release preparation: dev → main" \
              --body "Automated merge of dev into main for release preparation." \
              --head $BRANCH_NAME \
              --base main
            
            # Enable auto-merge and wait for it
            gh pr merge $BRANCH_NAME --auto --squash
            
            # Wait a bit for the merge to complete
            sleep 30
            
            echo "completed=true" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected. Please resolve manually."
            echo "completed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  determine-version:
    runs-on: ubuntu-latest
    needs: [merge-branches]
    if: ${{ always() && (inputs.skip_merge || needs.merge-branches.outputs.merge_completed == 'true') }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_source: ${{ steps.version.outputs.version_source }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Configure Git with token
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: List existing tags
        id: existing-tags
        run: |
          echo "## Available Tags" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following tags currently exist in the repository:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get all tags sorted by version (most recent first)
          TAGS=$(git tag -l --sort=-version:refname | head -10)
          if [ -z "$TAGS" ]; then
            echo "- No tags found" >> $GITHUB_STEP_SUMMARY
          else
            echo "$TAGS" | while read tag; do
              echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
            done
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Determine version
        id: version
        run: |
          case "${{ inputs.version_source }}" in
            "auto-increment")
              # Get the latest tag
              LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
              echo "Latest tag: $LATEST_TAG"
              
              # Remove 'v' prefix and split into parts
              VERSION=${LATEST_TAG#v}
              IFS='.' read -ra PARTS <<< "$VERSION"
              MAJOR=${PARTS[0]:-0}
              MINOR=${PARTS[1]:-0}
              PATCH=${PARTS[2]:-0}
              
              # Increment based on release type
              case "${{ inputs.release_type }}" in
                "major")
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                "minor")
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                "patch")
                  PATCH=$((PATCH + 1))
                  ;;
              esac
              
              NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
              echo "Auto-incremented version: $NEW_VERSION"
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "version_source=auto-increment" >> $GITHUB_OUTPUT
              ;;
              
            "manual")
              MANUAL_VERSION="${{ inputs.manual_version }}"
              if [ -z "$MANUAL_VERSION" ]; then
                echo "Error: Manual version cannot be empty when using manual source"
                exit 1
              fi
              
              # Add 'v' prefix if not present
              if [[ ! "$MANUAL_VERSION" =~ ^v ]]; then
                MANUAL_VERSION="v$MANUAL_VERSION"
              fi
              
              # Check if tag already exists
              if git tag -l | grep -q "^$MANUAL_VERSION$"; then
                echo "Warning: Tag $MANUAL_VERSION already exists. This will overwrite the existing tag."
              fi
              
              echo "Manual version: $MANUAL_VERSION"
              echo "version=$MANUAL_VERSION" >> $GITHUB_OUTPUT
              echo "version_source=manual" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Create tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          echo "Creating tag: $VERSION"

          # Check if tag already exists and delete it
          if git tag -l | grep -q "^$VERSION$"; then
            echo "Tag $VERSION already exists, deleting and recreating..."
            git tag -d $VERSION || true
            git push origin :refs/tags/$VERSION || true
            sleep 2
          fi

          # Create new tag
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-main:
    needs: [determine-version]
    uses: ./.github/workflows/release-main.yml
    with:
      version: ${{ needs.determine-version.outputs.version }}
      prerelease: ${{ inputs.pre_release }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-api:
    needs: [determine-version]
    uses: ./.github/workflows/release-api.yml
    with:
      version: ${{ needs.determine-version.outputs.version }}
      prerelease: ${{ inputs.pre_release }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    runs-on: ubuntu-latest
    needs: [determine-version, release-main, release-api]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f -ls

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          
          # Prepare release notes
          echo "## Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "This release includes both go-jo and go-jo-api applications." >> release_notes.md
          echo "" >> release_notes.md
          echo "### Applications Included:" >> release_notes.md
          echo "- 🚀 **go-jo** - Main CLI application" >> release_notes.md
          echo "- 🌐 **go-jo-api** - REST API service" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation:" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### go-jo (CLI):" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "sudo dpkg -i go-jo_*_linux_amd64.deb" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "#### go-jo-api (Service):" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "sudo dpkg -i go-jo-api_*_linux_amd64.deb" >> release_notes.md
          echo "sudo cp /etc/go-jo-api/.env.example /etc/go-jo-api/.env" >> release_notes.md
          echo "sudo nano /etc/go-jo-api/.env  # Configure tokens" >> release_notes.md
          echo "sudo systemctl start go-jo-api" >> release_notes.md
          echo '```' >> release_notes.md
          
          # Create release with all artifacts
          PRERELEASE_FLAG=""
          if [ "${{ inputs.pre_release }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          gh release create "$VERSION" \
            $PRERELEASE_FLAG \
            --title "Release $VERSION" \
            --notes-file release_notes.md \
            ./artifacts/go-jo-artifacts/* \
            ./artifacts/go-jo-api-artifacts/*

      - name: Create release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.determine-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version Source:** ${{ needs.determine-version.outputs.version_source }}" >> $GITHUB_STEP_SUMMARY

          case "${{ needs.determine-version.outputs.version_source }}" in
            "auto-increment")
              echo "**Release Type:** ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
              ;;
            "manual")
              echo "**Manual Version:** ${{ inputs.manual_version }}" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

          echo "**Pre-release:** ${{ inputs.pre_release }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch merging:** ${{ inputs.skip_merge && 'Skipped' || 'Completed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Released Applications" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ go-jo (binary + .deb package)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ go-jo-api (.deb package + systemd service)" >> $GITHUB_STEP_SUMMARY
          echo "- ⏳ go-jo-integration-installer (coming soon)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Release ${{ needs.determine-version.outputs.version }} published successfully!**" >> $GITHUB_STEP_SUMMARY
